/*
 * API Простого Інтернет-Магазину
 * Це просте API для інтернет-магазину, яке дозволяє користувачам переглядати товари та робити замовлення.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Order;
import org.openapitools.client.model.Product;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createOrder
     * @param order  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Замовлення створено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Недійсне замовлення </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderCall(Order order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(Order order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling createOrder(Async)");
        }
        

        okhttp3.Call localVarCall = createOrderCall(order, _callback);
        return localVarCall;

    }

    /**
     * Створення замовлення
     * 
     * @param order  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Замовлення створено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Недійсне замовлення </td><td>  -  </td></tr>
     </table>
     */
    public void createOrder(Order order) throws ApiException {
        createOrderWithHttpInfo(order);
    }

    /**
     * Створення замовлення
     * 
     * @param order  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Замовлення створено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Недійсне замовлення </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createOrderWithHttpInfo(Order order) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(order, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Створення замовлення (asynchronously)
     * 
     * @param order  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Замовлення створено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Недійсне замовлення </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAsync(Order order, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(order, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProduct
     * @param product  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Товар створено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(Product product, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = product;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(Product product, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling createProduct(Async)");
        }
        

        okhttp3.Call localVarCall = createProductCall(product, _callback);
        return localVarCall;

    }

    /**
     * Створення товару
     * 
     * @param product  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Товар створено </td><td>  -  </td></tr>
     </table>
     */
    public void createProduct(Product product) throws ApiException {
        createProductWithHttpInfo(product);
    }

    /**
     * Створення товару
     * 
     * @param product  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Товар створено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createProductWithHttpInfo(Product product) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(product, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Створення товару (asynchronously)
     * 
     * @param product  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Товар створено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(Product product, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(product, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProduct
     * @param productId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Товар видалено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductCall(String productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductValidateBeforeCall(String productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProduct(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Видалення товару
     * 
     * @param productId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Товар видалено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProduct(String productId) throws ApiException {
        deleteProductWithHttpInfo(productId);
    }

    /**
     * Видалення товару
     * 
     * @param productId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Товар видалено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductWithHttpInfo(String productId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Видалення товару (asynchronously)
     * 
     * @param productId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Товар видалено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductAsync(String productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductById
     * @param productId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Об&#39;єкт товару </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductByIdCall(String productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductByIdValidateBeforeCall(String productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductById(Async)");
        }
        

        okhttp3.Call localVarCall = getProductByIdCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Отримати товар за його ідентифікатором
     * 
     * @param productId  (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Об&#39;єкт товару </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public Product getProductById(String productId) throws ApiException {
        ApiResponse<Product> localVarResp = getProductByIdWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Отримати товар за його ідентифікатором
     * 
     * @param productId  (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Об&#39;єкт товару </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> getProductByIdWithHttpInfo(String productId) throws ApiException {
        okhttp3.Call localVarCall = getProductByIdValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Отримати товар за його ідентифікатором (asynchronously)
     * 
     * @param productId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Об&#39;єкт товару </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductByIdAsync(String productId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductByIdValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProducts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Масив товарів </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProductsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listProductsCall(_callback);
        return localVarCall;

    }

    /**
     * Перелік усіх товарів
     * 
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Масив товарів </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> listProducts() throws ApiException {
        ApiResponse<List<Product>> localVarResp = listProductsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Перелік усіх товарів
     * 
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Масив товарів </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> listProductsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listProductsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Перелік усіх товарів (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Масив товарів </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProductsAsync(final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     * @param productId  (required)
     * @param product  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Товар оновлено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCall(String productId, Product product, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = product;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(String productId, Product product, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProduct(Async)");
        }
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling updateProduct(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductCall(productId, product, _callback);
        return localVarCall;

    }

    /**
     * Оновлення товару
     * 
     * @param productId  (required)
     * @param product  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Товар оновлено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public void updateProduct(String productId, Product product) throws ApiException {
        updateProductWithHttpInfo(productId, product);
    }

    /**
     * Оновлення товару
     * 
     * @param productId  (required)
     * @param product  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Товар оновлено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateProductWithHttpInfo(String productId, Product product) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productId, product, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Оновлення товару (asynchronously)
     * 
     * @param productId  (required)
     * @param product  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Товар оновлено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Товар не знайдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAsync(String productId, Product product, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productId, product, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
